// gctv.d.ts
//
// TypeScript declaration file for GCTV Python API and GTA V Native Functions.
// Provides type hints and documentation for IntelliSense in JavaScript/TypeScript.
//
// Generated by Gemini.

interface Vector3 {
    x: number;
    y: number;
    z: number;
}

declare namespace GCT {
    /**
     * Schedules a callback function to be executed after a specified delay (in milliseconds).
     * The function stores the callback in the global stash to prevent it from being garbage-collected before its execution.
     * @param callback The callback function to execute after the delay.
     * @param delay The time in milliseconds to wait before executing the callback.
     * @returns A `timerId` (number) that uniquely identifies the scheduled timer.
     */
    function setTimeout(callback: Function, delay: number): number;

    /**
     * Pauses the execution of the current script for a specified duration in milliseconds.
     * This is a blocking call that halts further execution until the sleep period is over.
     * @param duration The number of milliseconds to sleep.
     */
    function sleep(duration: number): void;

    /**
     * Loads and evaluates a JavaScript module file in the GCTV environment.
     * It looks for the module in the default `Scripts` directory but allows specifying
     * either relative or absolute paths.
     * @param modulePath The path to the module file to load.
     * - Relative Path: A path relative to the default `Scripts` directory, e.g., "custom/myScript.js".
     * - Absolute or Custom Relative Path: If the module is outside the default folder,
     * you can provide an absolute or a custom relative path, e.g., "/custom/path/to/customScript.js".
     * @returns The last result of execution in the JavaScript code.
     */
    function require(modulePath: string): any;

    /**
     * Returns the current version of the GCTV runtime as an integer.
     * This can be used to check compatibility or for debugging purposes.
     */
    function GetGCTVersion(): number;

    /**
     * Returns the current version of the GCTV runtime as a string.
     * Useful for displaying version info or performing string-based comparisons.
     */
    function GetGCTStringVersion(): string;

    /**
     * Returns the absolute path to the root directory of the current GCTV project.
     * This can be used to construct file paths relative to the project location.
     */
    function GetGCTFolder(): string;

    /**
     * Restarts all scripts currently running in the GCTV environment.
     * This function initiates the restart asynchronously and terminates the current script execution immediately.
     * Note: Code after this call will not be executed in the current script thread.
     */
    function RestartScripts(): void;

    /**
     * Executes a JS script located at the specified path in a new thread.
     * @param scriptPath Path to JS script.
     * @returns True if the script was successfully run, otherwise false.
     */
    function RunScript(scriptPath: string): boolean;

    /**
     * Dynamically calls a function from any loaded DLL module using its name and a specified return type.
     * Accepts up to 21 arguments for the target function. The return value is automatically cast
     * and returned according to the provided prototype.
     * @param functionName The name of the function to call. Must exist in one of the loaded DLL modules.
     * @param prototype Specifies the expected return type. Supported values:
     * - "integer" – returns a 64-bit integer
     * - "integer32" – returns a 32-bit integer
     * - "float" – returns a floating-point number
     * - "boolean" – returns a boolean
     * - "string" – returns a C-style string
     * - "array(n)" – returns an array of `n` 64-bit integers
     * @param args Optional arguments to pass to the function (up to 21 total).
     * @returns The result of the function call, cast to the specified type. If the function is not found or the prototype is invalid, `null` is returned.
     */
    function Call(functionName: string, prototype: string, ...args: any[]): any;

    /**
     * Returns the current Unix timestamp in milliseconds (UTC), measured from January 1, 1970.
     */
    function getTimestamp(): number;

    /**
     * Converts the input string to uppercase characters.
     * @param string A single string input to be transformed to uppercase.
     * @returns A `string` containing the uppercase version of the input.
     */
    function toUpperCase(string: string): string;

    /**
     * Converts the input string to lowercase characters.
     * @param string A single string input to be transformed to lowercase.
     * @returns A `string` containing the lowercase version of the input.
     */
    function toLowerCase(string: string): string;

    /**
     * Converts the first character of the string to uppercase and the remaining characters to lowercase.
     * @param string The string to capitalize.
     * @returns A `string` where the first character is uppercase and the rest are lowercase.
     */
    function capitalize(string: string): string;

    /**
     * Reverses the characters in the given string.
     * @param string The input string to be reversed.
     * @returns A `string` with characters in reverse order.
     */
    function reverseString(string: string): string;

    /**
     * Removes leading and trailing whitespace characters (spaces and tabs) from the input string.
     * @param string The input string to trim.
     * @returns A `string` with no leading or trailing spaces or tabs.
     */
    function trimString(string: string): string;

    /**
     * Returns the current system time as a formatted string.
     * @returns A string representing the current date and time, or `null` if formatting fails.
     */
    function getCurrentTime(): string | null;

    /**
     * Returns a random integer number between `min` and `max` inclusive.
     * If `min` is greater than `max`, the values will be swapped internally.
     * @param min The minimum value of the random number range.
     * @param max The maximum value of the random number range.
     * @returns A random integer between `min` and `max`, inclusive.
     */
    function getRandomNumber(min: number, max: number): number;
}

/**
 * Global `console` object, providing functions for console input/output and command binding.
 */
declare namespace console {
    /**
     * Logs messages to the console.
     * Note: This might extend or override the standard JavaScript `console.log`.
     * @param args Arguments to log.
     */
    function log(...args: any[]): void;

    /**
     * Logs error messages to the console.
     * Note: This might extend or override the standard JavaScript `console.error`.
     * @param args Arguments to log as an error.
     */
    function error(...args: any[]): void;

    /**
     * Prompts the user for input via the console. Optionally, displays a prompt message before waiting for input.
     * @param prompt (Optional) A string to display as a prompt before waiting for user input. If omitted, no prompt is shown.
     * @returns The user input as a string.
     */
    function input(prompt?: string): string;

    /**
     * Displays a tooltip with a list of options, allowing the user to select one of them
     * by entering the appropriate index or option name. The function returns the index of the selected option.
     * @param prompt A string message displayed to the user before the list of options.
     * @param values An array containing the list of options from which the user can choose.
     * @returns An integer representing the index of the selected option in the `values` array.
     */
    function inputFromList(prompt: string, values: string[]): number;

    /**
     * Sets the console text color based on the provided color name string.
     * Supported colors include: "dark blue", "dark green", "dark aqua", "dark red",
     * "dark purple", "dark yellow", "light gray", "dark gray", "blue", "green",
     * "aqua", "red", "purple", "yellow", "white".
     * @param color The name of the color to set.
     */
    function setColour(color: string): void;

    /**
     * Resets the console text color to the default color.
     */
    function resetColour(): void;

    /**
     * Prints text to the console in the specified color. The first argument specifies the color,
     * and all subsequent arguments are concatenated into the output string. This function does not print the script name.
     * @param color The color name to set the text to.
     * @param args Additional arguments to be concatenated into a single string output.
     */
    function print(color: string, ...args: any[]): void;

    /**
     * Writes text to the console without appending a newline. All arguments passed to the function
     * are concatenated into a single string with spaces between them.
     * @param args One or more arguments to be concatenated and written to the console.
     */
    function write(...args: any[]): void;

    /**
     * Registers a new console command in GCTV that, when entered by the user in the terminal,
     * triggers the associated JavaScript function.
     * @param command The command name to register.
     * @param callback The JavaScript function to execute when the command is entered in the console.
     * @returns A boolean indicating whether the command was successfully registered (`true`)
     * or if the command already exists (`false`).
     */
    function BindCommand(command: string, callback: Function): boolean;

    /**
     * Unregisters a console command in GCTV, removing the associated JavaScript callback function.
     * This stops the command from triggering the bound JS function when entered in the terminal.
     * @param command The name of the command to unregister.
     * @returns A boolean indicating whether the command was successfully unregistered (`true`)
     * or if the command was not found or not registered (`false`).
     */
    function UnBindCommand(command: string): boolean;

    /**
     * Checks if a given console command is currently registered in the GCTV environment.
     * @param command The name of the command to check.
     * @returns `true` if the command is registered, `false` if it does not exist.
     */
    function IsCommandExist(command: string): boolean;
}

/**
 * Global `fs` object, providing functions for file system operations.
 */
declare namespace fs {
    /**
     * Reads the entire content of a file specified by its filename and returns it as a string.
     * Throws an error if the file cannot be opened.
     * @param filename The path to the file to be read.
     * @returns The content of the file as a string.
     */
    function readFile(filename: string): string;

    /**
     * Writes the specified string data to a file at the given filename.
     * If the file does not exist, it will be created or overwritten.
     * Throws an error if the file cannot be opened for writing.
     * @param filename The path to the file to write data to.
     * @param data The string content to write into the file.
     */
    function writeFile(filename: string, data: string): void;

    /**
     * Lists all regular files (not directories) in the specified folder path and returns them as a JavaScript array of filenames.
     * @param folderPath The path to the directory to list files from.
     * @returns An array of strings, where each string is the filename of a regular file inside the folder.
     * Returns `null` if the folder does not exist or is not a directory.
     */
    function readdir(folderPath: string): string[] | null;

    /**
     * Deletes the specified file from the filesystem.
     * @param filePath The path to the file to be deleted.
     * @returns `true` if the file was successfully deleted, otherwise `false`.
     */
    function deleteFile(filePath: string): boolean;

    /**
     * Checks if a file or directory exists at the specified path.
     * @param filePath The path to the file or directory to check.
     * @returns `true` if the file or directory exists, otherwise `false`.
     */
    function fileExists(filePath: string): boolean;

    /**
     * Creates a new directory at the specified path.
     * @param dirPath The path where the new directory should be created.
     * @returns `true` if the directory was successfully created, otherwise `false` (e.g., if the directory already exists).
     */
    function createDirectory(dirPath: string): boolean;

    /**
     * Retrieves the file extension (including the dot) from a given file path.
     * @param filePath The full path or name of the file.
     * @returns The file extension as a string, including the leading dot (e.g., ".txt").
     * If the file has no extension, returns an empty string.
     */
    function getFileExtension(filePath: string): string;

    /**
     * Retrieves the file name without its extension from a given file path.
     * @param filePath The full path or name of the file.
     * @returns The file name without the extension as a string.
     */
    function getFileName(filePath: string): string;
}

/**
 * Global `global` object, providing functions for interacting with GCTV's shared global variables.
 */
declare namespace global {
    /**
     * Registers a global variable in GCTV's memory space. This global variable becomes accessible
     * to all scripts, including those written in other programming languages supported by the environment.
     * @param name The name of the global variable to register.
     * @param value The value to assign to the global variable. Supports numbers (int/double), strings,
     * or arrays of uniform data types (all numbers or all strings).
     * @throws {TypeError} If the value is not a supported type or if an array is empty/mixed-type.
     */
    function register(name: string, value: number | string | (number[] | string[])): void;

    /**
     * Retrieves the value of a global variable previously registered in GCTV's shared memory.
     * @param name The name of the global variable to retrieve.
     * @returns The value of the global variable (number, string, or array of numbers/strings).
     * Returns `null` if the variable does not exist or is of an unknown type.
     */
    function get(name: string): number | string | (number[] | string[]) | null;

    /**
     * Updates the value of an existing global variable in GCTV's shared memory.
     * @param name The name of the global variable to update.
     * @param value The new value to set. Supports numbers (int/double), strings,
     * or arrays of uniform data types (all numbers or all strings).
     * @throws {TypeError} If the value is not a supported type or if an array is empty/mixed-type.
     * @throws {Error} If internal validation fails.
     */
    function set(name: string, value: number | string | (number[] | string[])): void;

    /**
     * Checks if a global variable with the specified name exists in the GCTV shared memory.
     * @param name The name of the global variable to check.
     * @returns `true` if the global variable exists, `false` if it does not exist.
     */
    function search(name: string): boolean;
}

declare namespace Game {
    /**
     * Allocates a new block of memory in the GTAV.
     * @param size The size of memory to allocate, in bytes.
     * @returns Memory address (as a numeric value) of the allocated block.
     */
    function New(size: number): number;

    /**
     * Allocates a memory block sized for a pointer and stores the provided value in it.
     * @param value A 64-bit integer (pointer-sized value) to store in the newly allocated memory.
     * @returns Memory address (as a numeric value) pointing to the allocated block where the pointer was stored.
     */
    function NewPointer(value: number): number;

    /**
     * Allocates 4 bytes of memory and stores the given Ped ID in it.
     * @param Ped The Ped ID to store in the allocated memory.
     * @returns A pointer (memory address) to the allocated memory containing the Ped ID.
     */
    function NewPed(Ped: number): number;

    /**
     * Allocates 4 bytes of memory and stores the given Vehicle ID in it.
     * @param Vehicle The Vehicle ID to store in the allocated memory.
     * @returns A pointer (memory address) to the allocated memory containing the Vehicle ID.
     */
    function NewVehicle(Vehicle: number): number;

    /**
     * Allocates 4 bytes of memory and stores the given Object ID in it.
     * @param Object The Object ID to store in the allocated memory.
     * @returns A pointer (memory address) to the allocated memory containing the Object ID.
     */
    function NewObject(Object: number): number;

    /**
     * Allocates memory for a `Vector3` structure and initializes it with the provided `x`, `y`, and `z` values.
     * @param value An object with numeric properties `x`, `y`, and `z` representing coordinates.
     * @returns A pointer (memory address) to the allocated and initialized `Vector3`.
     */
    function NewVector3(value: Vector3): number;

    /**
     * Frees previously allocated memory at the specified address.
     * @param pointer A memory address previously returned by functions like `New`, `NewPointer`, `NewPed`, etc.
     */
    function Delete(pointer: number): void;

    /**
     * Frees memory allocated for a `Vector3` object.
     * @param pointer A memory address previously returned by `NewVector3`.
     */
    function DeleteVector3(pointer: number): void;

    /**
     * Returns an array of all currently loaded entities in the game world.
     * @returns A tuple where the first element is an array of integer Entity IDs,
     * and the second is the total number of entities returned.
     */
    function GetAllEntities(): [number[], number];

    /**
     * Returns an array of all currently loaded peds in the game world.
     * @returns A tuple where the first element is an array of integer Ped IDs,
     * and the second is the total number of peds returned.
     */
    function GetAllPeds(): [number[], number];

    /**
     * Returns an array of all currently loaded vehicles in the game world.
     * @returns A tuple where the first element is an array of integer Vehicle IDs,
     * and the second is the total number of vehicles returned.
     */
    function GetAllVehicles(): [number[], number];

    /**
     * Returns an array of all currently loaded objects in the game world.
     * @returns A tuple where the first element is an array of integer Object IDs,
     * and the second is the total number of objects returned.
     */
    function GetAllObjects(): [number[], number];

    /**
     * Calls a native game function by its hash with specified arguments and returns the result.
     * @param functionHash The hash of the native function to call, obtained from the `HashString` function.
     * @param returnType Expected return type of the native function. Supported types:
     * - "string"
     * - "integer32"
     * - "integer" (64-bit)
     * - "number" (float)
     * - "boolean"
     * @param args Array of arguments to pass to the native function.
     * @returns The value from the native function call, converted to the specified return type.
     * Returns `undefined` if the function call fails or if the return type is unknown.
     */
    function NativeCall(functionHash: string, returnType: string, args: any[]): any;

    /**
     * Get a hash from the given string.
     * @param inputString The string to hash.
     * @returns The hash value as a decimal string.
     */
    function HashString(inputString: string): string;

    /**
     * Reads an integer value from the specified memory address.
     * @param address The memory address from which the integer value should be read.
     * @returns An `number` representing the value stored at the provided address.
     * @throws {Error} If the function fails to read from the specified address.
     */
    function ReadInt(address: number): number;

    /**
     * Writes an integer value to the specified memory address.
     * @param address The memory address where the integer value should be written.
     * @param value The integer value to store at the specified memory address.
     * @throws {Error} If the function fails to write to the specified address.
     */
    function WriteInt(address: number, value: number): void;

    /**
     * Writes a floating-point value to the specified memory address.
     * @param address The memory address where the float value should be written.
     * @param value The floating-point number to store at the specified memory address.
     * @throws {Error} If the function fails to write to the specified address.
     */
    function WriteFloat(address: number, value: number): void;

    /**
     * Reads a floating-point value from the specified memory address.
     * @param address The memory address from which the floating-point value should be read.
     * @returns A `number` representing the float value stored at the provided address.
     * @throws {Error} If the function fails to read from the specified address.
     */
    function ReadFloat(address: number): number;

    /**
     * Reads a single byte value from the specified memory address.
     * @param address The memory address from which the byte value should be read.
     * @returns An `number` representing the byte stored at the provided address.
     * @throws {Error} If the function fails to read from the specified address.
     */
    function ReadByte(address: number): number;

    /**
     * Reads a boolean value from the specified memory address.
     * @param address The memory address from which the boolean value should be read.
     * @returns A `boolean` (`true` or `false`) representing the value stored at the provided address.
     * @throws {Error} If the function fails to read from the specified address.
     */
    function ReadBool(address: number): boolean;

    /**
     * Reads a double-precision floating-point value from the specified memory address.
     * @param address The memory address from which the double value should be read.
     * @returns A `number` representing the double value stored at the provided address.
     * @throws {Error} If the function fails to read from the specified address.
     */
    function ReadDouble(address: number): number;

    /**
     * Reads a 64-bit integer value from the specified memory address.
     * @param address The memory address from which the 64-bit integer value should be read.
     * @returns A `number` representing the 64-bit integer value stored at the provided address.
     * @throws {Error} If the function fails to read from the specified address.
     */
    function ReadInt64(address: number): number;

    /**
     * Reads a short integer value from the specified memory address.
     * @param address The memory address from which the short integer value should be read.
     * @returns An `number` representing the short value stored at the provided address.
     * @throws {Error} If the function fails to read from the specified address.
     */
    function ReadShort(address: number): number;

    /**
     * Writes a short integer value to the specified memory address.
     * @param address The memory address where the short integer value should be written.
     * @param value The short integer value to store at the specified memory address.
     * @throws {Error} If the function fails to write to the specified address.
     */
    function WriteShort(address: number, value: number): void;

    /**
     * Reads a sequence of bytes from the specified memory address and returns them as an array.
     * @param address The memory address from which the byte sequence should be read.
     * @param length The number of bytes to read. Must be greater than zero.
     * @returns An `Array<number>` of integers, where each element represents a single byte.
     * @throws {Error} If `length` is less than or equal to zero, or if the function fails to read.
     */
    function ReadBytes(address: number, length: number): number[];

    /**
     * Writes a boolean value (`true` or `false`) to the specified memory address.
     * @param address The memory address where the boolean value should be written.
     * @param value The boolean value (`true` or `false`) to store at the specified memory address.
     * @throws {Error} If the function fails to write to the specified address.
     */
    function WriteBool(address: number, value: boolean): void;

    /**
     * Writes a double-precision floating-point value to the specified memory address.
     * @param address The memory address where the double value should be written.
     * @param value The double-precision floating-point number to store at the specified memory address.
     * @throws {Error} If the function fails to write to the specified address.
     */
    function WriteDouble(address: number, value: number): void;

    /**
     * Writes a sequence of bytes to the specified memory address.
     * @param address The memory address where the byte sequence should be written.
     * @param bytes An array of byte values to store at the specified memory address.
     * @throws {Error} If the byte array is empty, memory allocation fails, or the function fails to write.
     */
    function WriteBytes(address: number, bytes: number[]): void;

    /**
     * Writes a string to the specified memory address. This function copies the provided string
     * into the memory location, ensuring it includes the null terminator.
     * @param address The memory address where the string should be written.
     * @param str The string to store at the specified memory address.
     * @throws {Error} If the function fails to write to the specified address.
     */
    function WriteString(address: number, str: string): void;

    /**
     * Reads a string from the specified memory address.
     * @param address The memory address from which the string should be read.
     * @param length The number of characters to read. Must be greater than zero.
     * @returns A `string` representing the value stored at the provided address.
     * @throws {Error} If `length` is zero, memory allocation fails, or the function fails to read.
     */
    function ReadString(address: number, length: number): string;

    /**
     * Searches for a specific integer value within a given memory range.
     * @param start The starting memory address for the search.
     * @param end The ending memory address for the search.
     * @param value The integer value to search for within the specified range.
     * @returns A `number` representing the memory address where the value was found, or `null` if not found.
     * @throws {Error} If an error occurs during the search.
     */
    function FindValue(start: number, end: number, value: number): number | null;

    /**
     * Searches for a specific byte pattern within a given memory range.
     * @param start The starting memory address for the search.
     * @param end The ending memory address for the search.
     * @param pattern The byte pattern to search for (e.g., "48 8B 05 ?? ?? ?? ??").
     * @param mask A mask defining which bytes in the pattern should be matched ('x' for exact match, '?' for wildcard).
     * @returns A `number` representing the memory address where the pattern was found, or `null` if not found.
     * @throws {Error} If an error occurs during the search.
     */
    function FindPattern(start: number, end: number, pattern: string, mask: string): number | null;

    /**
     * Retrieves the base address of the GTAV.
     * @returns A `number` representing the base address of the current module.
     */
    function GetBaseAddress(): number;
}

/**
 * Global `Input` object, providing access to input device states (Keyboard, Mouse, Gamepad).
 */
declare namespace Input {
    /**
     * Functions related to keyboard input.
     */
    namespace Keyboard {
        /**
         * Converts a string representation of a key name into its corresponding numerical key code.
         * @param keyName The string representing the name of the key (e.g., "A", "Enter", "Space").
         * @returns A `number` (integer) representing the key code.
         * @throws {Error} If the string key name cannot be recognized or converted to a key code.
         */
        function stringToKey(keyName: string): number;

        /**
         * Checks whether a specific key or combination of keys (packed into a single integer) is currently pressed.
         * The function checks up to 4 key codes stored in each byte of the 32-bit `keyCode`.
         * Each byte (from least to most significant) is treated as a separate key. If a byte is `0`, the loop terminates.
         * @param keyCode A packed integer representing one or more key codes.
         * @returns `true` if all specified keys are currently pressed, `false` otherwise.
         */
        function isPressed(keyCode: number): boolean;
    }

    /**
     * Functions related to mouse input.
     */
    namespace Mouse {
        /**
         * Represents the X and Y coordinates of the mouse cursor.
         */
        interface MousePosition {
            x: number;
            y: number;
        }

        /**
         * Returns the current position of the mouse cursor on the screen.
         * @returns An object `{ x: number, y: number }` representing the cursor's coordinates (in screen space),
         * or `null` if the position could not be retrieved (e.g., system error).
         */
        function getPos(): MousePosition | null;

        /**
         * Sets the mouse cursor position on the screen.
         * @param x The X coordinate in screen pixels.
         * @param y The Y coordinate in screen pixels.
         */
        function setPos(x: number, y: number): void;

        /**
         * Checks if the mouse wheel was scrolled up since the last input poll.
         * @returns `true` if the wheel was scrolled up, `false` otherwise.
         */
        function isScrolledUp(): boolean;

        /**
         * Checks if the mouse wheel was scrolled down since the last input poll.
         * @returns `true` if the wheel was scrolled down, `false` otherwise.
         */
        function isScrolledDown(): boolean;

        /**
         * Checks if the left mouse button is currently pressed.
         * @returns `true` if the left button is pressed, `false` otherwise.
         */
        function isLeftPressed(): boolean;

        /**
         * Checks if the right mouse button is currently pressed.
         * @returns `true` if the right mouse button is pressed, `false` otherwise.
         */
        function isRightPressed(): boolean;
    }

    /**
     * Interface for an `Input.Gamepad` object instance.
     */
    interface GamepadInstance {
        /**
         * Selects a game controller for the current `Input.Gamepad` object instance.
         * This function should be called as a method of an `Input.Gamepad` object.
         * @param controller The ID of the controller to select.
         */
        selectController(controller: number): void;

        /**
         * Retrieves the currently selected controller ID for the current `Input.Gamepad` object instance.
         * This function should be called as a method of an `Input.Gamepad` object.
         * @returns The controller ID as an integer.
         */
        getController(): number;

        /**
         * Returns the last key pressed on the selected gamepad controller associated with the current instance of the `Input.Gamepad` object.
         * This function should be called as a method of an `Input.Gamepad` object.
         * If no key is pressed, it returns `null`.
         * @returns The pressed key as a string, or `null` if no key is pressed.
         */
        getPressedKey(): string | null;

        /**
         * Returns an array of all the most recently pressed keys on the selected gamepad controller
         * associated with the current instance of the `Input.Gamepad` object.
         * If no keys are pressed, it returns an empty array.
         * @returns An array of strings representing the pressed keys.
         */
        getPressedKeys(): string[];

        /**
         * Retrieves the current position of the left analog stick of the selected gamepad controller.
         * @returns An object with `ThumbLX` and `ThumbLY` (horizontal and vertical positions), or `null` if unavailable.
         */
        getLeftStickState(): { ThumbLX: number; ThumbLY: number } | null;

        /**
         * Retrieves the current state of the right analog stick of the selected gamepad controller.
         * @returns An object with `ThumbRX` and `ThumbRY` (horizontal and vertical positions), or `null` if unavailable.
         */
        getRightStickState(): { ThumbRX: number; ThumbRY: number } | null;

        /**
         * Retrieves the current state of the left and right triggers of the selected gamepad controller.
         * @returns An object with `LT` and `RT` (pressure values), or `null` if unavailable.
         */
        getTriggersState(): { LT: number; RT: number } | null;

        /**
         * Triggers vibration on the selected gamepad controller associated with the current `Input.Gamepad` instance.
         * @param strength A float value representing the vibration strength (e.g., `0.0` to `1.0`).
         * @param vibrateLeftMotor Whether to activate the left motor.
         * @param vibrateRightMotor Whether to activate the right motor.
         */
        sendVibration(strength: number, vibrateLeftMotor: boolean, vibrateRightMotor: boolean): void;
    }

    /**
     * Global function to create a new Gamepad object instance.
     * Each Gamepad object manages its own unique ID for controller state.
     * @returns A new `Input.GamepadInstance` object.
     */
    function Gamepad(): GamepadInstance;
}

