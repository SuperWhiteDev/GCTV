# Generated by Gemini.
# Stub file for the GCT Python API.
# This file provides type hints and docstrings for the GCT module
# to enhance IntelliSense in development environments like VS Code (Pylance).
# Generated based on GCTV Python Functions Documentation.

from typing import Any, List, Tuple, Dict, Callable, Union

# Define a type alias for a 3D vector dictionary for clarity.
Vector3Dict = Dict[str, float]

def GetGCTVersion() -> int:
    """
    Returns the version of the GCTV engine as an integer.
    """
    ...

def GetGCTStringVersion() -> str:
    """
    Returns the current version of the GCTV engine as a formatted string.
    """
    ...

def GetGCTFolder() -> str:
    """
    Returns the absolute path to the GCT working directory.
    """
    ...

def RunScript(path: str) -> bool:
    """
    Runs another script from a given path. Returns True if successful.
    """
    ...

def Restart() -> None:
    """
    Restarts all running scripts.
    """
    ...

def IsScriptsStillWorking() -> bool:
    """
    Returns True if scripts are still executing; False if all scripts have stopped.
    """
    ...

def IsPressedKey(keyCode: int) -> bool:
    """
    Checks if a specific key is currently being pressed.
    """
    ...

def IsDoubleClickedKey(keyCode: int) -> int:
    """
    Checks if a specific key is currently pressed.
    If it has been pressed only once, returns 1.
    If it has been pressed twice, returns 2.
    If it has not been pressed, returns 0.
    """
    ...

def ConvertStringToKeyCode(keyName: str) -> int:
    """
    Converts a key name like "Ctrl+W" into a corresponding key code.
    """
    ...

def GetMousePos() -> Tuple[int, int]:
    """
    Retrieves the current mouse position as a tuple (x, y).
    """
    ...

def SetMousePos(x: int, y: int) -> None:
    """
    Sets the mouse cursor to the specified (x, y) screen coordinates.
    """
    ...

def New(size: int) -> int:
    """
    Allocates memory for a new object and returns its pointer.
    """
    ...

def NewPointer(value: int) -> int:
    """
    Allocates memory for a new pointer.
    """
    ...

def NewPed(pedID: int) -> int:
    """
    Creates a new pointer to Ped entity and writes the specified value there.
    """
    ...

def NewVehicle(vehicleID: int) -> int:
    """
    Creates a new pointer to Vehicle entity and writes the specified value there.
    """
    ...

def NewObject(objectID: int) -> int:
    """
    Creates a new pointer to Object entity and writes the specified value there.
    """
    ...

def NewVector3(vector: Vector3Dict) -> int:
    """
    Allocates memory for a new 3D vector based on a dict with keys x, y, and z,
    and returns its pointer.
    """
    ...

def Delete(pointer: int) -> None:
    """
    Frees the memory allocated at the specified pointer.
    """
    ...

def DeleteVector3(pointer: int) -> None:
    """
    Frees memory allocated for a 3D vector.
    """
    ...

def GetAllEntities() -> List[int]:
    """
    Retrieves all game entities as a Python list.
    """
    ...

def GetAllPeds() -> List[int]:
    """
    Retrieves all ped entities as a Python list.
    """
    ...

def GetAllVehicles() -> List[int]:
    """
    Retrieves all vehicle entities as a Python list.
    """
    ...

def GetAllObjects() -> List[int]:
    """
    Retrieves all object entities as a Python list.
    """
    ...

def NativeCall(functions_hash: int, return_type: str, args: List[Any]) -> Any:
    """
    Calls a native game function by its hash with the provided arguments.
    returnType must be: "str|long|int|pointer|float|bool"
    (long -> 32-bit integer, int -> 64-bit integer)
    """
    ...

def HashString(string: str) -> int:
    """
    Converts a string to a 64-bit hash.
    """
    ...

def DisplayError(message: str) -> None:
    """
    Displays an error message with alert formatting in the terminal.
    """
    ...

def BindCommand(commandName: str, callback: Callable[[], Any]) -> bool:
    """
    Binds a Python function to a custom terminal command.
    """
    ...

def UnBindCommand(commandName: str) -> bool:
    """
    Removes a command binding.
    """
    ...

def IsCommandExist(commandName: str) -> bool:
    """
    Checks if a command with the given name is currently bound.
    """
    ...

def Input(prompt: str) -> str:
    """
    Displays a prompt and waits for user text input.
    """
    ...

def InputFromList(prompt: str, options: List[str]) -> int:
    """
    Displays a prompt and a list of options, returns the selected index.
    """
    ...

def SetColor(color: str) -> None:
    """
    Sets the console text color. Example values: "red", "dark yellow".
    """
    ...

def ResetColor() -> None:
    """
    Resets the console color to default.
    """
    ...

def printColoured(color: str, message: str) -> None:
    """
    Prints text in the specified color.

    Parameters:
    - color (str): The color name to set the text to. Supported colors are:
      - "dark blue"
      - "dark green"
      - "dark aqua"
      - "dark red"
      - "dark purple"
      - "dark yellow"
      - "light gray"
      - "dark gray"
      - "blue"
      - "green"
      - "aqua"
      - "red"
      - "purple"
      - "yellow"
      - "white"
    """
    ...

def GCTOut(text: str) -> None:
    """
    Outputs text to the internal and external GCT console.
    """
    ...

def ExternalOut(*args: Any) -> None:
    """
    Outputs text to the external console (can be redirected or captured).
    """
    ...

def help() -> None:
    """
    Displays a list of available Python functions in the GCT module.
    """
    ...

class Globals:
    """
    Provides access to GCTV's global variables, allowing registration, retrieval,
    setting, and checking existence of shared variables across scripts.
    """
    def register(self, name: str, value: Any) -> None:
        """
        Registers a global variable in GCTV's memory space. This global variable
        becomes accessible to all scripts, including those written in other
        programming languages supported by the environment. The function supports
        registering: int, float, str, list[str], list[int], list[float].
        """
        ...

    def get(self, name: str) -> Any:
        """
        Retrieves the value of a global variable previously registered in GCTV's
        shared memory. The returned value matches the original type of the global variable.
        """
        ...

    def set(self, name: str, value: Any) -> None:
        """
        Sets the value of an existing global variable.
        """
        ...

    def exists(self, name: str) -> bool:
        """
        Checks whether a global variable with the given name exists.
        """
        ...