# Generated by Gemini.
# Stub file for the Game Python API.
# This file provides type hints and docstrings for the Game module
# to enhance IntelliSense in development environments like VS Code (Pylance).
# Generated based on GCTV Python Functions Documentation.

from typing import List, Optional

def ReadInt(address: int) -> int:
    """
    Reads a 32-bit integer from memory.
    """
    ...

def ReadFloat(address: int) -> float:
    """
    Reads a float value from memory.
    """
    ...

def WriteInt(address: int, value: int) -> None:
    """
    Writes a 32-bit integer to memory.
    """
    ...

def WriteFloat(address: int, value: float) -> None:
    """
    Writes a float value to memory.
    """
    ...

def ReadByte(address: int) -> int:
    """
    Reads a byte (8-bit unsigned int) from memory.
    """
    ...

def ReadDouble(address: int) -> float:
    """
    Reads a double-precision float from memory.
    """
    ...

def WriteByte(address: int, value: int) -> None:
    """
    Writes a byte to memory.
    """
    ...

def WriteDouble(address: int, value: float) -> None:
    """
    Writes a double-precision float to memory.
    """
    ...

def ReadInt64(address: int) -> int:
    """
    Reads a 64-bit integer from memory.
    """
    ...

def WriteInt64(address: int, value: int) -> None:
    """
    Writes a 64-bit integer to memory.
    """
    ...

def ReadShort(address: int) -> int:
    """
    Reads a 16-bit short from memory.
    """
    ...

def WriteShort(address: int, value: int) -> None:
    """
    Writes a 16-bit short to memory.
    """
    ...

def ReadBytes(address: int, count: int) -> List[int]:
    """
    Reads multiple bytes from memory.
    """
    ...

def WriteBytes(address: int, data: List[int]) -> None:
    """
    Writes multiple bytes to memory.
    """
    ...

def WriteString(address: int, text: str) -> None:
    """
    Writes a null-terminated string to memory.
    """
    ...

def ReadString(address: int, maxLength: int) -> str:
    """
    Reads a null-terminated string from memory.
    """
    ...

def FindValue(start: int, end: int, value: int) -> Optional[int]:
    """
    Scans memory and returns a list of addresses where the given value is found.
    Note: The prototype shows `Optional[int]`, but description implies list. Assuming `Optional[int]` for first match.
    If it's meant to return a list of addresses, it should be `-> List[int]`.
    """
    ...

def FindPattern(start: int, end: int, pattern: str, mask: str) -> int:
    """
    Scans memory for a pattern/signature and returns the first matching address.
    """
    ...

def GetBaseAddress() -> int:
    """
    Returns the base memory address of a loaded module.
    """
    ...